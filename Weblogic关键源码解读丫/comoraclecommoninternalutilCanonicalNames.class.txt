//
// Source code recreated from a .class file by IntelliJ IDEA
// (powered by FernFlower decompiler)
//

package com.oracle.common.internal.util;

public class CanonicalNames {
    public static final String VALUE_EXTRACTOR_METHOD_SUFFIX = "()"; //后缀
    public static final String[] VALUE_EXTRACTOR_BEAN_ACCESSOR_PREFIXES = new String[]{"get", "is"}; //前缀

    public CanonicalNames() {
    }
	// 处理方法名称sName
    public static String computeValueExtractorCanonicalName(String sName, Object[] aoParam) {
        int nMethodSuffixLength = "()".length();
        if (aoParam != null && aoParam.length > 0) {
            return null;
        } else if (!sName.endsWith("()")) { //方法参数不为空时，直接通过
            return sName;
        } else { //方法以“get”或“is”为前缀且参数为空，取出get/is后变换通过
            String sNameCanonical = sName;
            int nNameLength = sName.length();
            String[] var5 = VALUE_EXTRACTOR_BEAN_ACCESSOR_PREFIXES;
            int var6 = var5.length;

            for(int var7 = 0; var7 < var6; ++var7) {
                String sPrefix = var5[var7];
                int nPrefixLength = sPrefix.length();
                if (nNameLength > nPrefixLength && sName.startsWith(sPrefix)) {
                    sNameCanonical = Character.toLowerCase(sName.charAt(nPrefixLength)) + sName.substring(nPrefixLength + 1, nNameLength - nMethodSuffixLength);
                    break;
                }
            }

            return sNameCanonical;
        }
    }

    public static String computeValueExtractorCanonicalName(String sName) {
        return computeValueExtractorCanonicalName(sName, (Object[])null);
    }
}
