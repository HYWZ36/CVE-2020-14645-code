//
// Source code recreated from a .class file by IntelliJ IDEA
// (powered by FernFlower decompiler)
//

package com.tangosol.util.comparator;

import com.tangosol.internal.util.invoke.Lambdas;
import com.tangosol.io.ExternalizableLite;
import com.tangosol.io.pof.PofReader;
import com.tangosol.io.pof.PofWriter;
import com.tangosol.io.pof.PortableObject;
import com.tangosol.util.Base;
import com.tangosol.util.ExternalizableHelper;
import com.tangosol.util.ValueExtractor;
import com.tangosol.util.InvocableMap.Entry;
import java.io.DataInput;
import java.io.DataOutput;
import java.io.IOException;
import java.util.Comparator;
import javax.json.bind.annotation.JsonbProperty;

public class ExtractorComparator<T> implements Comparator<T>, ExternalizableLite, PortableObject {
    @JsonbProperty("extractor")
    private ValueExtractor<? super T, ? extends Comparable> m_extractor;

    public ExtractorComparator() {
    }

    public <E extends Comparable<? super E>> ExtractorComparator(ValueExtractor<? super T, ? extends E> extractor) {
        Base.azzert(extractor != null);
        this.m_extractor = (ValueExtractor)Lambdas.ensureRemotable(extractor);
    }
	
	// 比较两个实体大小
    public int compare(T o1, T o2) { //Entry表示键值对，不清晰extract()具体是什么逻辑
        Comparable a1 = o1 instanceof Entry ? (Comparable)((Entry)o1).extract(this.m_extractor) : (Comparable)this.m_extractor.extract(o1);
        Comparable a2 = o2 instanceof Entry ? (Comparable)((Entry)o2).extract(this.m_extractor) : (Comparable)this.m_extractor.extract(o2);
        if (a1 == null) {
            return a2 == null ? 0 : -1;
        } else {
            return a2 == null ? 1 : a1.compareTo(a2);  //不清楚这里重写的比较逻辑
        }
    }

    public void readExternal(DataInput in) throws IOException {
        this.m_extractor = (ValueExtractor)ExternalizableHelper.readObject(in);
    }

    public void writeExternal(DataOutput out) throws IOException {
        ExternalizableHelper.writeObject(out, this.m_extractor);
    }

    public void readExternal(PofReader in) throws IOException {
        this.m_extractor = (ValueExtractor)in.readObject(0);
    }

    public void writeExternal(PofWriter out) throws IOException {
        out.writeObject(0, this.m_extractor);
    }

    public ValueExtractor<? super T, ? extends Comparable> getExtractor() {
        return this.m_extractor;
    }
}
